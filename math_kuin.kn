func all_op_seqs (size:int) : list<[]char>
    var ops1: list<[]char> :: #list<[]char>
    var ops2: list<[]char> :: #list<[]char>
    if (size = 1)
       do ops1.add("+")
       do ops1.add("*")
       ret ops1
    end if

    foreach sub_op_seq(all_op_seqs(size - 1))
        do ops2.add("+" ~ sub_op_seq)
        do ops2.add("*" ~ sub_op_seq)
    end foreach
    ret ops2
end func

func calculate(index:int, headnum:int, maxnum:int, ops:[]char) : int
    if (index = maxnum)
        ret headnum
    end if
    var op : char :: ops[0]

    if (op = '+')
        ret headnum + calculate(index+1, index+1, maxnum, ops.sub(1,maxnum-index-1))
    end if
    ret calculate(index+1, headnum * (index+1), maxnum, ops.sub(1,maxnum-index-1))
end func

func expr_to_str(minnum:int, maxnum:int, ops:[]char) : []char
    if (minnum = maxnum)
        ret minnum.toStr()
    end if

    var str : []char :: minnum.toStr() ~ [ops[0]]
    if ((minnum + 1) = maxnum)
        ret str ~ expr_to_str(minnum+1, maxnum, "")
    end if
    ret str ~ expr_to_str(minnum+1, maxnum, ops.sub(1,maxnum-minnum-1))
end func

func q1() : bool
    var all_ops : list<[]char> :: @all_op_seqs(3)
    var exprs : list<[]char> :: #list<[]char>
    foreach ops_seq(all_ops)
        var result : int :: @calculate(1,1,4,ops_seq)
        var expr : []char :: @expr_to_str(1,4,ops_seq)
        var prefix : []char :: ""
        if (result < 10)
            do prefix :~ "0"
        end if
        do exprs.add(prefix ~ result.toStr() ~ " = " ~ @expr_to_str(1,4,ops_seq) ~ "\n")
    end foreach

    var expr_array : [][]char :: exprs.toArray()
    do expr_array.sort()
    for i(0,7)
        do cui@print(expr_array[i])
    end for
    ret true
end func

func q2() : bool
    var all_ops : list<[]char> :: @all_op_seqs(4)
    foreach ops_seq_l(all_ops)
        var result_l : int :: @calculate(1,1,5,ops_seq_l)
        foreach ops_seq_r(all_ops)
            var result_r : int :: @calculate(2,2,6,ops_seq_r)
            if (result_l = result_r)
                do cui@print(@expr_to_str(1,5,ops_seq_l) ~ " == " ~ @expr_to_str(2,6,ops_seq_r) ~ "\n")
            end if
        end foreach
    end foreach
    ret true
end func

func main()
    do @q1()
    do @q2()
end func
