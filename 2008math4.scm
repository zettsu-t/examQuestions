(define (opLists size)
  (define (appendOps ls accum)
    (append accum (list (append '(#\+) ls) (append '(#\*) ls))))
  (cond ((= size 0) '((#\+) (#\*)))
        (#t (let ((subLs (opLists (- size 1))))
              (fold appendOps '() subLs)))))

(define (numRange minNum maxNum)
  (cond ((= minNum maxNum) (list maxNum))
        (#t (append (list minNum) (numRange (+ minNum 1) maxNum)))))

(define (zip ls rs)
  (cond ((null? ls) '())
        (#t (append (list (car ls) (car rs))
                    (zip (list-tail ls 1) (list-tail rs 1))))))

(define (expressions minNum maxNum)
  (define (applyOps ops nums)
    (cond ((null? ops)
           (list-ref nums 0))
          ((eqv? (list-ref ops 0) #\+)
           (+ (list-ref nums 0) (applyOps (list-tail ops 1) (list-tail nums 1))))
          ((eqv? (list-ref ops 0) #\*)
           (applyOps (list-tail ops 1)
                     (append (list (* (list-ref nums 0) (list-ref nums 1)))
                             (list-tail nums 2))))))

  (let ((allOpLists (opLists (- (- maxNum minNum) 1)))
        (nums (numRange minNum maxNum)))
    (define (toString x)
      (append (list (car x) #\= (car nums)) (zip (list-tail x 1) (list-tail nums 1))))
    (define (applyToNums opList) (cons (applyOps opList nums) opList))
    (define (sortPairs x y) (< (car x) (car y)))
    (map toString (sort (map applyToNums allOpLists) sortPairs))))

(define (exprMatcher minNum maxNum)
  (let ((exprLeft (expressions minNum maxNum)))
    (lambda (exprRight)
      (define (matcher x)
        (cond ((= (car x) (car exprRight)) #t)
              (#t #f)))
      (define (concat x accum) (append accum (append x '(#\= #\=))))

      (let* ((exprs (map cddr (filter matcher exprLeft)))
             (candidates (fold concat '() exprs)))
        (cond ((null? candidates) #f)
              (#t (append candidates (cddr exprRight))))))))

(define (main args)
  ((print "")
   (print (expressions 1 4))
   (print (filter (lambda (x) x) (map (exprMatcher 1 5) (expressions 2 6))))
   (exit 0)))
